name: "CI"

env:
  API_KEY_ALCHEMY: ${{ secrets.API_KEY_ALCHEMY }}
  FOUNDRY_PROFILE: "ci"

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v4"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Install Bun"
        uses: "oven-sh/setup-bun@v1"

      - name: "Install the Node.js dependencies"
        run: "bun install"

      - name: "Build the contracts and print their size"
        run: "forge build --sizes"

      - name: "Add build summary"
        run: |
          echo "## Build result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  test:
    needs: ["build"]
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v4"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Install Bun"
        uses: "oven-sh/setup-bun@v1"

      - name: "Install the Node.js dependencies"
        run: "bun install"

      - name: "Show the Foundry config"
        run: "forge config"

      - name: "Generate a fuzz seed that changes weekly to avoid burning through RPC allowance"
        run: >
          echo "FOUNDRY_FUZZ_SEED=$(
            echo $(($EPOCHSECONDS - $EPOCHSECONDS % 604800))
          )" >> $GITHUB_ENV

      - name: "Run the tests"
        run: "forge test"

      - name: "Add test summary"
        run: |
          echo "## Tests result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

      - name: "Get the code coverage percentage of the branches as ENV"
        run: echo "LINE_COVERAGE=$(awk '/^\| Total/ {print $4}' <<< "$(forge coverage)")" >> $GITHUB_ENV
      - name: "Get the branch coverage percentage of the branches as ENV"
        # No need to run this twice, you could store the first output.
        run: echo "BRANCH_COVERAGE=$(awk '/^\| Total/ {print $10}' <<< "$(forge coverage)")" >> $GITHUB_ENV

      - name: Get coverage output
        id: coverage
        run: echo "value=$(jq -r '.total.lines.pct|tostring + "%"' coverage/coverage-summary.json)" >> $GITHUB_OUTPUT
      - name: Update code coverage badge JSON gist
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 59ab053717e0ed834dc2b24304edd5c6
          filename: Solidity-Forge-Template_line_coverage.json
          label: Line Coverage
          message: ${{ env.LINE_COVERAGE }}
          namedLogo: jest
          color: green
          logoColor: lightblue

      - name: Update branch coverage badge JSON gist
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 59ab053717e0ed834dc2b24304edd5c6
          filename: Solidity-Forge-Template_branch_coverage.json
          label: Branch Coverage
          message: ${{ env.BRANCH_COVERAGE }}
          namedLogo: jest
          color: green
          logoColor: lightblue
